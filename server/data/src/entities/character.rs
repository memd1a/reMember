//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use super::sea_orm_active_enums::GenderTy;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "character")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub created_at: DateTime,
    pub last_login_at: Option<DateTime>,
    pub gender: GenderTy,
    pub skill_points: Vec<u8>,
    pub play_time: i32,
    pub level: i32,
    pub exp: i32,
    pub gacha_exp: i32,
    pub str: i32,
    pub dex: i32,
    pub luk: i32,
    pub int: i32,
    pub hp: i32,
    pub max_hp: i32,
    pub mp: i32,
    pub max_mp: i32,
    pub mesos: i32,
    pub map_id: i32,
    pub buddy_capacity: i32,
    pub fame: i32,
    pub ap: i32,
    pub sp: i32,
    pub job: i32,
    pub equip_slots: i32,
    pub use_slots: i32,
    pub setup_slots: i32,
    pub etc_slots: i32,
    pub cash_slots: i32,
    pub storage_slots: i32,
    pub face: i32,
    pub skin: i32,
    pub hair: i32,
    pub spawn_point: i32,
    pub acc_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccId",
        to = "super::account::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account,
    #[sea_orm(has_many = "super::inventory_slot::Entity")]
    InventorySlot,
    #[sea_orm(has_many = "super::skill::Entity")]
    Skill,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::inventory_slot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InventorySlot.def()
    }
}

impl Related<super::skill::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Skill.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
